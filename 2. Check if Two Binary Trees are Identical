def are_identical(root1, root2):
  if root1 == None and root2 ==None:
    return True 
  if root1 != None and root2 !=None and root1.data == root2.data:
    return are_identical(root1.left,root2.left) and are_identical(root1.right,root2.right)
  # TODO: Write - Your - Code
  return False 
  
 Runtime complexity #
The runtime complexity of this solution is linear, O(n).

Memory complexity #
The memory complexity of this solution is O(h).

The recursive solution has O(h) memory complexity as it will consume memory on the stack up to the height of binary tree hh. It will be O(log n) for a balanced tree and, in the worst case, can be O(n).
