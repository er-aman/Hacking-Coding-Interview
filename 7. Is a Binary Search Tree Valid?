// Here i can check recursively for left and right node  if it is valid or not.
      
        100
       /   \
      50   200
     / \   / \
    25 75 125 350
    
 this is valid so to check it i would have to go to all its subparts and check recursively if it is valid or not
 
 
 def helper_is_bst(root,min_value,max_value):
    if root is None:
        return True
    if root.data<min_value or root.data> max_value:
        return False
    return helper_is_bst(root.left,min_value,root.data) and helper_is_bst(root.right,root.data,max_value)
def is_bst(root):
  # TODO: Write - Your - Code
  return helper_is_bst(root,float('-inf'),float('inf'))
  
  
  
  
Runtime complexity #
The runtime complexity of this solution is linear, O(n).

Memory complexity #
The memory complexity of this solution is linear, O(n).

Recursive solution has O(h) memory complexity as it will consume memory on the stack up to the height of binary tree h.
It will be O(log n) for a balanced tree and in the worst case can be O(n).
