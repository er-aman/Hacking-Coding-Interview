

Description #
Given a binary tree, write an iterative algorithm to traverse the tree in-order. Letâ€™s look at the tree below as an example.

100
50
200
25
75
35
In-order traversal of the above tree should visit the nodes in the following order: 25, 35, 50, 75, 100, 200.

Runtime complexity #
The runtime complexity of this solution is linear, O(n).

Memory complexity #
The memory complexity of this solution is O(h).

The iterative solution has O(h) memory complexity as it instantiates a stack that has to store information up to the height of binary tree h. It will be O(log n) for a balanced tree and can be O(n) in the worst case.

For an iterative in-order traversal, a stack is used to track the nodes. Here is the pseudocode.

initialize the current_node as root.
create an empty stack stk.
Push the current_node in stk and set  current_node = current_node->left until current_node becomes NULL.
if stk is not empty and current_node == NULL then
  Print the top element from stk
  Pop the top element from stk and set current_node = element_popped->right
  go to step 3
if current_node is null and stack is empty then algorithm terminates.

def inorder_iterative(root):
  result = ""
  # TODO: Write - Your - Code 
  stack=[]
  node = root
  while len(stack) or node != None:
    if node:
      stack.append(node)
      node = node.left
      continue
    cur_top = stack.pop()
    result += str(cur_top.data) + " "
    node = cur_top.right
  return result
