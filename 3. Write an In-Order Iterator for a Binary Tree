We are given the root node of a binary tree. We have to write an iterator that takes in this root and iterates through the nodes of a binary tree in an in-order way.
The expectation is to write two critical methods of any iterator: hasNext() and getNext().

class InorderIterator:
  def __init__(self,root):
    self.stack=[]
    self.populate_stack(root)
 
  def populate_stack(self,root):
  // it will populate the stack with the left elements of my root
    while root !=None:
      self.stack.append(root)
      root = root.left
  
  def hasNext(self):
    // it will check if my stack is empty or not
    if self.stack:
      return True
    return False
  
  def getNext(self):
    // here i need to append the next value in my output that is the topmost element of my stack and i need to delete that element and, take it as
    // starting point to populate my stack further with its right child and taking all its left most elements
    
    if not self.stack:
      return None
    
    res = self.stack[-1]
    del self.satck[-1]
    temp = res.right
    self.populate_stack(temp)
    
    return res

def iteration_with_inorder(self,root):
  node = InorderIterator(root)
  my_str=""
  while node.hasNext():
    ptr = node.getNext()
    my_str += str(ptr.data) + " "
  return my_str

arr = [25,125,200,300,75,50,12,35,60,75]
root = create_BST(arr)
print(iteration_with_inorder(root))


The runtime complexity of this solution is linear, O(n)O(n).

Memory complexity #
The memory complexity of this solution is O(h)O(h).

An iterative solution has O(h) memory complexity as it instantiates a stack that has to store information up to the height of the binary tree (h). 
It will be O(logn)O(logn) for a balanced tree and, in the worst case, can be O(n).
